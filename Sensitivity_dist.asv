function [ pi ] = Sensitivity_dist( X,t,r )
%SENSITIVITY_DIST Summary of this function goes here
%   Detailed explanation goes here

N = size(X,1);
p = size(X,2);

%% "Sensitivity" regression

r_init = max(round(r/10),1);

% sampling small initial uniformly
[~, idx1] = WRS(X(t==1),ones(N/2,1),r_init);
[~, idx2] = WRS(X(t==-1),ones(N/2,1),r_init);

idx_init = [idx1; idx2+round(N/2)];

% fitting the initial model

svmStr = svmtrain(X(idx_init,:),t(idx_init));
hold on

w = (svmStr.Alpha' * full(svmStr.SupportVectors));
w = [svmStr.Bias w];

X = [ones(N,1) X];
%m = mean(X(idx_init,:),1) %mean point
%plot(m(1),m(2),'ok') % see where the mean point is
%[1 m] * w' % gives a score close to zero because its close to the line


%% calculating the score


ewx = exp(X*w');
newx = exp(-X*w');

yh = 1./(1+newx);

yhdw = X.*repmat(newx./(newx+1).^2,[1,p+1]);

Ldwdw = zeros(p+1);

for n = 1:N
    Xn = X(n,:);
    
    

    if t(n)==1
        Ldwdw = Ldwdw - Xn'*Xn*exp(-Xn*w')/(1+exp(-Xn*w')); 
    else
        Ldwdw = Ldwdw - Xn'*Xn/(1+exp(-Xn*w'));
    end
    
    Ldwdw = 
    
    
    if isnan(Ldwdw)
        Ldwdw 
    end
end

Ldydw = sum(X,1)';

% yhdy = yhdw * Ldwdw^(-1) * Ldydw
yhdy = yhdw * (Ldwdw\Ldydw);

pi = yhdy./sum(yhdy);



end

